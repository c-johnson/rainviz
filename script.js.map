{"version":3,"sources":["script.coffee"],"names":[],"mappings":"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","file":"script.js","sourceRoot":"/source/","sourcesContent":["class RainThing\n  constructor: () ->\n    @width = 960\n    @height = 1160\n    @californication2()\n    # @refugeeChart()\n\n  # type:  \"svg\" or \"canvas\"\n  makeDisplay: (type) ->\n    display = d3.select(\"body\").append(type)\n      .attr(\"width\", @width)\n      .attr(\"height\", @height)\n      .attr(\"style\", \"border: 1px solid black;\")\n\n    return display\n\n  californication2: () ->\n    svg = @makeDisplay(\"svg\")\n\n    d3.json 'data/USA-states.json', (geoUSA) =>\n\n      projection = d3.geo.albersUsa()\n        .scale(1000)\n        .translate([@width / 2, @height / 2]);\n\n      usaPath = d3.geo.path(geoUSA)\n        .projection(projection)\n\n      svg.append(\"path\")\n          .datum(geoUSA)\n          .attr(\"d\", usaPath);\n\n  californication: () ->\n    d3.csv 'data/cal-boundary.csv', (data) =>\n      canvas = @makeDisplay(\"canvas\")\n      geoCali = new GeoPolygon(_.map data, (dat) -> [parseFloat(dat.lat), parseFloat(dat.long)])\n      window.Cali = geoCali\n      gJson = geoCali.geoJson\n\n      projection = d3.geo.albersUsa()\n        .scale(1000)\n\n      context = canvas.node().getContext(\"2d\")\n\n      caliPath = d3.geo.path()\n        .projection(projection)\n        .context(context)\n\n      gJson.bbox = gJson.features[0].bbox = gJson.bounds\n\n      caliPath(topojson.feature(gJson, gJson.features[0]))\n\n      # caliPath(topojson.feature(us, us.objects.counties));\n      # context.fillStyle = '#333'\n      # context.stroke()\n      # context.fillStyle = '#FF0000'\n      # context.stroke()\n\n      drawer = new CanvasDrawer\n      drawer.drawCanvasThing(960, 500, gJson.bbox, gJson, context)\n\n\n\n      # b_canvas = document.getElementById(\"calicanvas\")\n      # b_context = b_canvas.getContext(\"2d\");\n      # b_context.fillRect(50, 25, 150, 100);\n\n      # caliPath.bounds(geoCali.geoJson.bounds);\n      # caliPath.projection(d3.geo.albersUsa());\n      # caliPath.context(b_context);\n\n      # drawer.drawCanvasThing(500, 500, geoCali.geoJson.bounds, geoCali.geoJson)\n\n  refugeeChart: () ->\n    d3.csv 'data/chart.csv', (data) ->\n      refugeeMax = data[data.length - 1].numRefugees\n      refugeeMin = data[0].numRefugees\n      div = d3.select('.the-data').append('div').attr('class', 'tooltip').style('opacity', 0)\n      d3.select('.the-data').selectAll('div').data(data).enter().append('div').classed 'data-row', true\n      d3.selectAll('.data-row').append('div').classed('bar', true).style('background-color', (d) ->\n        if d.numRefugees <= 100000\n          return 'green'\n        else if d.numRefugees > 100000 and d.numRefugees <= 500000\n          return 'yellow'\n        else if d.numRefugees > 500000 and d.numRefugees <= 2000000\n          return 'orange'\n        else if d.numRefugees > 2000000\n          return 'red'\n        return\n      ).style('height', (d) ->\n        percent = d.numRefugees / refugeeMax\n        barHeight = percent * 250\n        barHeight + 10 + 'px'\n      ).on('mouseover', (d) ->\n        div.transition().duration(0).style 'opacity', .9\n        div.html(d.numRefugees + '<br/>' + 'refugees').style('left', d3.event.pageX + 'px').style 'top', d3.event.pageY - 28 + 'px'\n        return\n      ).on 'mouseout', (d) ->\n        div.transition().duration(0).style 'opacity', 0\n        return\n      d3.selectAll('.data-row').append('p').classed('label', true).text (data) ->\n        data.date\n      return\n    console.log 'you are now rocking with d3', d3\n\nclass GeoPolygon\n  constructor: (coords) ->\n    @geoJson =\n      \"type\": \"FeatureCollection\"\n      \"bbox\": []\n      \"features\": [{\n        \"type\": \"Feature\"\n        \"bbox\": []\n        \"geometry\":\n          \"type\": \"Polygon\"\n          \"coordinates\": [coords]\n    }]\n\n    @updateCoords(coords)\n\n  fLen: () ->\n    return @geoJson?.features?.length\n\n  updateFeature: (ind, newCoords) ->\n    if feature = @geoJson?.features[ind]\n      feature.geometry?.coordinates = [newCoords]\n      @geoJson.bounds = bounds = [[], []]\n                        #left, top, right, bottom\n      # @geoJson.bounds = [[10, 10], [50, 80]]\n\n      for newCoord in newCoords\n        long = newCoord[0]\n        lat = newCoord[1]\n\n        bounds[0][0] = bounds.xMin = if bounds.xMin < long then bounds.xMin else long\n        bounds[1][0] = bounds.xMax = if bounds.xMax > long then bounds.xMax else long\n        bounds[1][1] = bounds.yMin = if bounds.yMin < lat then bounds.yMin else lat\n        bounds[0][1] = bounds.yMax = if bounds.yMax > lat then bounds.yMax else lat\n\n  updateCoords: (newCoords, index) =>\n    if index then @updateFeature(index, newCoords)\n    else\n      for i in [0..@fLen()]\n        @updateFeature(i, newCoords)\n\nclass CanvasDrawer\n  drawCanvasThing: (width, height, bounds, data, context) ->\n    context.fillStyle = '#FF0000'\n    coords = undefined\n    point = undefined\n    latitude = undefined\n    longitude = undefined\n    xScale = undefined\n    yScale = undefined\n    scale = undefined\n    xScale = width / Math.abs(bounds.xMax - (bounds.xMin))\n    yScale = height / Math.abs(bounds.yMax - (bounds.yMin))\n    scale = if xScale < yScale then xScale else yScale\n    # Again, we want to use the “features” key of\n    # the FeatureCollection\n    data = data.features\n    # Loop over the features…\n    i = 0\n    while i < data.length\n      # …pulling out the coordinates…\n      coords = data[i].geometry.coordinates[0]\n      # …and for each coordinate…\n      j = 0\n      while j < coords.length\n        longitude = coords[j][0]\n        latitude = coords[j][1]\n        # Scale the points of the coordinate\n        # to fit inside our bounding box\n        point =\n          x: (longitude - (bounds.xMin)) * scale\n          y: (bounds.yMax - latitude) * scale\n        # If this is the first coordinate in a shape, start a new path\n        if j == 0\n          context.beginPath()\n          context.moveTo point.x, point.y\n          # Otherwise just keep drawing\n        else\n          context.lineTo point.x, point.y\n        j++\n      # Fill the path we just finished drawing with color\n      context.stroke()\n      i++\n    return\n\nthing = new RainThing\n"]}