{"version":3,"sources":["script.coffee"],"names":[],"mappings":"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","file":"script.js","sourceRoot":"/source/","sourcesContent":["# FIRST STEP:  Downlaod station data\n\n# Station sniping code\n# First, go to http://wrcc.dri.edu/csc/scenic/data/station_finder/\n# Select the data you'd like to copy in the table, and then in chrome dev tools:\n\n# THE CODE:\n\n# var endResult = \"\";\n#\n# $('#station_list tr').each(function(index, trdom) {\n#\n#   var items = [];\n#   var firstChild = $(trdom).find('td:nth-child(3)').text();\n#   stationNames.push(firstChild);\n#   var lat = $(trdom).find('td:nth-child(4)').text();\n#   var long = $(trdom).find('td:nth-child(5)').text();\n#   items.push([firstChild, lat, long])\n#   var result = items.join(\",\")\n#   endResult += result + \"\\n\"\n# });\n#\n# console.log(endResult);\n# copy(endResult);\n\n# SECOND STEP:  Get current data\n#  http://www.cnrfc.noaa.gov/rainfall_data.php\n#  http://www.wrh.noaa.gov/cnrfc/rsa_getprod.php?prod=RNORR5RSA&wfo=cnrfc&version=0\n#     - or http://www.cnrfc.noaa.gov/awipsProducts/RNORR5RSA.php\n\n# THE CODE:\n\n# var delims = [\":\", \".\", \"$\", \"\"];\n#\n# precipData = [];\n#\n# var arr = $('.center-content pre').text().split('\\n');\n# arr.splice(0, 3);\n# arr = arr.filter(function(item) { return delims.indexOf(item.charAt(0)) === -1 });\n# arr.map(function(item) {\n#   console.log(JSON.stringify(item));\n#   var parts = item.split(\" : \");\n#   var id = parts[0];\n#   var name = parts[1];\n#   var rawPrecip = parts[2];\n#   precipBuckets = rawPrecip.split(\"/ \");\n#   var precipRow = {\n#     id: id,\n#     name: name,\n#     precip: precipBuckets\n#   };\n#   precipData.push(precipRow);\n#   // console.log(\"id = \" + id + \"\\nname = \" + name + \"\\nprecip = \" + JSON.stringify(precipBuckets))\n# });\n# copy(precipData);\n\nwindow.noop = ->\nwindow.polygon = (d) ->\n  return \"M\" + d.join(\"L\") + \"Z\"\n\nclass RainThing\n  constructor: () ->\n    @width = 960\n    @height = 1160\n    @californication()\n    # @usaify()\n    # @refugeeChart()\n    # @derpyCal()\n\n  # type:  \"svg\" or \"canvas\"\n  makeDisplay: (type) ->\n    display = d3.select(\"body\").append(type)\n      .attr(\"width\", @width)\n      .attr(\"height\", @height)\n      .attr(\"style\", \"border: 1px solid black;\")\n\n    return display\n\n  makePoint: (id, coord) ->\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"GEO_ID\": \"0400000US06\",\n        \"STATE\": \"06\",\n        \"NAME\": id,\n        \"LSAD\": \"\",\n        \"CENSUSAREA\": 155779.220000\n      },\n      \"geometry\": {\n        \"type\": \"Point\", \"coordinates\": coord\n      }\n    }\n\n  projectLineString: (feature, projection) ->\n    line = []\n    d3.geo.stream(feature, projection.stream({\n      polygonStart: noop\n      polygonEnd: noop\n      lineStart: noop\n      lineEnd: noop\n      point: (x, y) -> line.push([x, y])\n      sphere: noop\n    }))\n    return line\n\n  randomizeArea: (d, double) ->\n    num1 = Math.abs(d3.geom.polygon(d).area())\n    num1 = if double then num1 * 2 else num1\n    num2 = Math.random() * 10000\n    return (num1 + num2) / 2\n\n  processPrecip: (precipData) ->\n    precipModel = []\n\n    precipData.forEach (item) ->\n      stationData =\n        id: item.id.trim()\n        name: item.name.trim()\n        precipBuckets:\n          oneHour: parseFloat(item.precip[0].trim())\n          twoHour: parseFloat(item.precip[1].trim())\n          threeHour: parseFloat(item.precip[2].trim())\n          sixHour: parseFloat(item.precip[3].trim())\n          twelveHour: parseFloat(item.precip[4].trim())\n          daily: parseFloat(item.precip[5].trim())\n\n      precipModel.push(stationData)\n\n    return precipModel\n\n  californication: () ->\n    svg = @makeDisplay(\"svg\")\n\n    d3.json 'data/USA-california.json', (geoCali) =>\n      d3.csv 'data/station-coords.csv', (stationCoords) =>\n        d3.json 'data/precip-data.json', (precipData) =>\n          stationData = @processPrecip(precipData)\n\n          commonSet = []\n\n          stationData.forEach (item) ->\n            stationCoords.forEach (sCoord) ->\n              if item.id == sCoord.name\n                commonSet.push(_.extend({}, item, sCoord))\n\n          commonSet.forEach (station) ->\n            for bucket in station.precipBuckets\n              if station.precipBuckets.hasOwnProperty(bucket)\n                amt = station.precipBuckets[bucket]\n                if amt != 0 && !isNaN(amt)\n                  debugger\n\n          finalCoords = commonSet\n          # finalCoords = stationCoords  # Either way can work\n\n          fillRed = d3.scale.linear()\n            .domain([0, 10000])\n            .range([\"#fff\", \"#f00\"])\n\n          fillBlue = d3.scale.linear()\n            .domain([0, 10000])\n            .range([\"#fff\", \"#00f\"])\n\n          projection = d3.geo.albersUsa()\n            .scale(3500)\n            .translate([1600, 400])\n\n          stationCoordinates = finalCoords.map (d) -> return [+d.long, +d.lat]\n          caliLineString = @projectLineString(geoCali, projection)\n          voronoi = d3.geom.voronoi()\n\n          geoStations = new GeoFeature\n\n          _.each finalCoords, (station) =>\n            stationId = \"station-\" + station.name\n            coords = [parseFloat(parseFloat(station.long).toFixed(2)), parseFloat(parseFloat(station.lat).toFixed(2))]\n            geoStations.features.push(@makePoint(stationId, coords))\n\n          usaPath = d3.geo.path(geoCali)\n            .projection(projection)\n\n          svg.append(\"path\")\n              .datum(geoCali)\n              .attr(\"d\", usaPath)\n\n          svg.selectAll(\".subunit\")\n              .data(geoCali.features)\n            .enter().append(\"path\")\n              .attr \"class\", (d) -> return \"subunit-\" + d.properties.NAME\n              .attr(\"d\", usaPath)\n\n          self = @\n\n          svg.append(\"g\")\n              .attr(\"class\", \"land\")\n            .selectAll(\".voronoi\")\n              .data(voronoi(stationCoordinates.map(projection)).map( (d) ->\n                # Each voronoi region is a convex polygon, therefore we can use\n                # d3.geom.polygon.clip, treating each regino as a clip region, with the\n                # projected “exterior” as a subject polygon.\n                return d3.geom.polygon(d).clip(caliLineString.slice())\n              ))\n            .enter().append(\"path\")\n              .attr(\"class\", \"voronoi\")\n              .style \"fill\", (d) ->\n                d.initialArea = self.randomizeArea(d,false)\n                return fillBlue(d.initialArea)\n              .attr(\"d\", polygon)\n              .on 'mouseenter', (d) ->\n                this.style.fill = fillBlue(self.randomizeArea(d,true))\n              .on 'mouseleave', (d) ->\n                this.style.fill = fillBlue(d.initialArea)\n\n  usaify: () ->\n    svg = @makeDisplay(\"svg\")\n\n    d3.json 'data/USA-states.json', (geoUSA) =>\n\n      projection = d3.geo.albersUsa()\n        .scale(1000)\n        .translate([@width / 2, @height / 2])\n\n      usaPath = d3.geo.path(geoUSA)\n        .projection(projection)\n\n      svg.append(\"path\")\n          .datum(geoUSA)\n          .attr(\"d\", usaPath)\n\n      svg.selectAll(\".subunit\")\n          .data(geoUSA.features)\n        .enter().append(\"path\")\n          .attr \"class\", (d) -> return \"subunit-\" + d.properties.NAME\n          .attr(\"d\", usaPath)\n          .on 'mouseenter', (feature) ->\n            this.style.fill = \"blue\"\n          .on 'mouseleave', (feature) ->\n            this.style.fill = \"\"\n\n  derpyCal: () ->\n    d3.csv 'data/cal-boundary.csv', (data) =>\n      canvas = @makeDisplay(\"canvas\")\n      geoCali = new GeoPolygon(_.map data, (dat) -> [parseFloat(dat.lat), parseFloat(dat.long)])\n      window.Cali = geoCali\n      gJson = geoCali.geoJson\n\n      projection = d3.geo.albersUsa()\n        .scale(1000)\n\n      context = canvas.node().getContext(\"2d\")\n\n      caliPath = d3.geo.path()\n        .projection(projection)\n        .context(context)\n\n      gJson.bbox = gJson.features[0].bbox = gJson.bounds\n\n      caliPath(topojson.feature(gJson, gJson.features[0]))\n\n      drawer = new CanvasDrawer\n      drawer.drawCanvasThing(960, 500, gJson.bbox, gJson, context)\n\n  refugeeChart: () ->\n    d3.csv 'data/chart.csv', (data) ->\n      refugeeMax = data[data.length - 1].numRefugees\n      refugeeMin = data[0].numRefugees\n      div = d3.select('.the-data').append('div').attr('class', 'tooltip').style('opacity', 0)\n      d3.select('.the-data').selectAll('div').data(data).enter().append('div').classed 'data-row', true\n      d3.selectAll('.data-row').append('div').classed('bar', true).style('background-color', (d) ->\n        if d.numRefugees <= 100000\n          return 'green'\n        else if d.numRefugees > 100000 and d.numRefugees <= 500000\n          return 'yellow'\n        else if d.numRefugees > 500000 and d.numRefugees <= 2000000\n          return 'orange'\n        else if d.numRefugees > 2000000\n          return 'red'\n        return\n      ).style('height', (d) ->\n        percent = d.numRefugees / refugeeMax\n        barHeight = percent * 250\n        barHeight + 10 + 'px'\n      ).on('mouseover', (d) ->\n        div.transition().duration(0).style 'opacity', .9\n        div.html(d.numRefugees + '<br/>' + 'refugees').style('left', d3.event.pageX + 'px').style 'top', d3.event.pageY - 28 + 'px'\n        return\n      ).on 'mouseout', (d) ->\n        div.transition().duration(0).style 'opacity', 0\n        return\n      d3.selectAll('.data-row').append('p').classed('label', true).text (data) ->\n        data.date\n      return\n    console.log 'you are now rocking with d3', d3\n\nclass GeoFeature\n  constructor: () ->\n    @type = \"FeatureCollection\"\n    @features = []\n\nclass GeoPolygon\n  constructor: (coords) ->\n    @geoJson =\n      \"type\": \"FeatureCollection\"\n      \"bbox\": []\n      \"features\": [{\n        \"type\": \"Feature\"\n        \"bbox\": []\n        \"geometry\":\n          \"type\": \"Polygon\"\n          \"coordinates\": [coords]\n    }]\n\n    @updateCoords(coords)\n\n  fLen: () ->\n    return @geoJson?.features?.length\n\n  updateFeature: (ind, newCoords) ->\n    if feature = @geoJson?.features[ind]\n      feature.geometry?.coordinates = [newCoords]\n      @geoJson.bounds = bounds = [[], []]\n                        #left, top, right, bottom\n      # @geoJson.bounds = [[10, 10], [50, 80]]\n\n      for newCoord in newCoords\n        long = newCoord[0]\n        lat = newCoord[1]\n\n        bounds[0][0] = bounds.xMin = if bounds.xMin < long then bounds.xMin else long\n        bounds[1][0] = bounds.xMax = if bounds.xMax > long then bounds.xMax else long\n        bounds[1][1] = bounds.yMin = if bounds.yMin < lat then bounds.yMin else lat\n        bounds[0][1] = bounds.yMax = if bounds.yMax > lat then bounds.yMax else lat\n\n  updateCoords: (newCoords, index) =>\n    if newCoords\n      if index then @updateFeature(index, newCoords)\n      else\n        for i in [0..@fLen()]\n          @updateFeature(i, newCoords)\n\nclass CanvasDrawer\n  drawCanvasThing: (width, height, bounds, data, context) ->\n    context.fillStyle = '#FF0000'\n    coords = undefined\n    point = undefined\n    latitude = undefined\n    longitude = undefined\n    xScale = undefined\n    yScale = undefined\n    scale = undefined\n    xScale = width / Math.abs(bounds.xMax - (bounds.xMin))\n    yScale = height / Math.abs(bounds.yMax - (bounds.yMin))\n    scale = if xScale < yScale then xScale else yScale\n    # Again, we want to use the “features” key of\n    # the FeatureCollection\n    data = data.features\n    # Loop over the features…\n    i = 0\n    while i < data.length\n      # …pulling out the coordinates…\n      coords = data[i].geometry.coordinates[0]\n      # …and for each coordinate…\n      j = 0\n      while j < coords.length\n        longitude = coords[j][0]\n        latitude = coords[j][1]\n        # Scale the points of the coordinate\n        # to fit inside our bounding box\n        point =\n          x: (longitude - (bounds.xMin)) * scale\n          y: (bounds.yMax - latitude) * scale\n        # If this is the first coordinate in a shape, start a new path\n        if j == 0\n          context.beginPath()\n          context.moveTo point.x, point.y\n          # Otherwise just keep drawing\n        else\n          context.lineTo point.x, point.y\n        j++\n      # Fill the path we just finished drawing with color\n      context.stroke()\n      i++\n    return\n\nthing = new RainThing\n"]}